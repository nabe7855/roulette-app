{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/constants.ts"],"sourcesContent":["import type { Question } from \"./types\";\n\nexport const MAX_QUESTIONS = 200;\nexport const QUESTIONS_PER_PAGE = 10;\n\nexport const INITIAL_QUESTIONS: Question[] = Array.from({ length: 25 }, (_, i) => ({\n  id: i + 1,\n  text: `これはサンプル質問${i + 1}です。フランスの首都はどこですか？答えはパリです。これはテキストの折り返しをテストするための長い質問です。`,\n  createdAt: new Date(Date.now() - i * 1000 * 60 * 60 * 24).toISOString().split('T')[0],\n  type: i % 2 === 0 ? 'roulette' : 'slot',\n}));"],"names":[],"mappings":";;;;;;;;AAEO,MAAM,gBAAgB;AACtB,MAAM,qBAAqB;AAE3B,MAAM,oBAAgC,MAAM,IAAI,CAAC;IAAE,QAAQ;AAAG,GAAG,CAAC,GAAG,IAAM,CAAC;QACjF,IAAI,IAAI;QACR,MAAM,CAAC,SAAS,EAAE,IAAI,EAAE,qDAAqD,CAAC;QAC9E,WAAW,IAAI,KAAK,KAAK,GAAG,KAAK,IAAI,OAAO,KAAK,KAAK,IAAI,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QACrF,MAAM,IAAI,MAAM,IAAI,aAAa;IACnC,CAAC","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/icons.tsx"],"sourcesContent":["\nimport React from 'react';\n\nexport const EditIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z\" />\n  </svg>\n);\n\nexport const DeleteIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n  </svg>\n);\n\nexport const AddIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n  </svg>\n);\n\nexport const LogoutIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n    </svg>\n);\n\nexport const SearchIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n    </svg>\n);\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAGO,MAAM,WAA6C,CAAC,EAAE,YAAY,SAAS,EAAE,iBAClF,8OAAC;QAAI,OAAM;QAA6B,WAAW;QAAW,MAAK;QAAO,SAAQ;QAAY,QAAO;kBACnG,cAAA,8OAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE;;;;;;;;;;;AAIlE,MAAM,aAA+C,CAAC,EAAE,YAAY,SAAS,EAAE,iBACpF,8OAAC;QAAI,OAAM;QAA6B,WAAW;QAAW,MAAK;QAAO,SAAQ;QAAY,QAAO;kBACnG,cAAA,8OAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE;;;;;;;;;;;AAIlE,MAAM,UAA4C,CAAC,EAAE,YAAY,SAAS,EAAE,iBACjF,8OAAC;QAAI,OAAM;QAA6B,WAAW;QAAW,MAAK;QAAO,SAAQ;QAAY,QAAO;kBACnG,cAAA,8OAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE;;;;;;;;;;;AAIlE,MAAM,aAA+C,CAAC,EAAE,YAAY,SAAS,EAAE,iBAClF,8OAAC;QAAI,OAAM;QAA6B,WAAW;QAAW,MAAK;QAAO,SAAQ;QAAY,QAAO;kBACjG,cAAA,8OAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE;;;;;;;;;;;AAItE,MAAM,aAA+C,CAAC,EAAE,YAAY,SAAS,EAAE,iBAClF,8OAAC;QAAI,OAAM;QAA6B,WAAW;QAAW,MAAK;QAAO,SAAQ;QAAY,QAAO;kBACjG,cAAA,8OAAC;YAAK,eAAc;YAAQ,gBAAe;YAAQ,aAAa;YAAG,GAAE","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/Header.tsx"],"sourcesContent":["// Reactライブラリをインポートします。\nimport React from 'react';\n// アイコンコンポーネントをインポートします。\nimport { LogoutIcon } from './icons';\n\n// Headerコンポーネントが受け取るデータ（props）の型を定義します。\ninterface HeaderProps {\n  questionCount: number;  // 現在の質問の総数\n  maxQuestions: number;     // 登録できる質問の最大数\n  onLogout: () => void;     // ログアウト処理を実行する関数\n}\n\n/**\n * ダッシュボードの上部に表示されるヘッダーコンポーネント\n * @param {HeaderProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst Header: React.FC<HeaderProps> = ({ questionCount, maxQuestions, onLogout }) => {\n  // 質問数が上限の90%を超えたかどうかを判定します。\n  const isApproachingLimit = questionCount > maxQuestions * 0.9;\n\n  return (\n    <header className=\"bg-white shadow-md sticky top-0 z-10\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between sm:items-center py-4 gap-4 sm:gap-0\">\n          {/* ページのタイトル */}\n          <h1 className=\"text-2xl font-bold text-gray-800 text-center sm:text-left\">質問ダッシュボード</h1>\n          \n          {/* 右側の情報エリア */}\n          <div className=\"w-full sm:w-auto flex justify-between sm:justify-end items-center space-x-4\">\n            {/* 質問数の表示 */}\n            <div className=\"text-sm font-medium\">\n              <span className={isApproachingLimit ? 'text-red-500' : 'text-gray-600'}>\n                合計: {questionCount}/{maxQuestions}\n              </span>\n            </div>\n            {/* ログアウトボタン */}\n            <button onClick={onLogout} className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition-colors\">\n              <LogoutIcon />\n              <span className=\"hidden sm:inline\">ログアウト</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default Header;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;AAEvB,wBAAwB;AACxB;;;AASA;;;CAGC,GACD,MAAM,SAAgC,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,QAAQ,EAAE;IAC9E,4BAA4B;IAC5B,MAAM,qBAAqB,gBAAgB,eAAe;IAE1D,qBACE,8OAAC;QAAO,WAAU;kBAChB,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAG,WAAU;kCAA4D;;;;;;kCAG1E,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAK,WAAW,qBAAqB,iBAAiB;;wCAAiB;wCACjE;wCAAc;wCAAE;;;;;;;;;;;;0CAIzB,8OAAC;gCAAO,SAAS;gCAAU,WAAU;;kDACnC,8OAAC,kJAAU;;;;;kDACX,8OAAC;wCAAK,WAAU;kDAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOjD;uCAGe","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/TabButton.tsx"],"sourcesContent":["// Reactライブラリをインポートします。\nimport React from 'react';\n\n// TabButtonコンポーネントが受け取るデータ（props）の型を定義します。\ninterface TabButtonProps {\n    label: string;      // ボタンに表示するテキスト\n    isActive: boolean;  // このタブが現在アクティブ（選択されている）かどうか\n    onClick: () => void; // ボタンがクリックされたときに呼ばれる関数\n}\n\n/**\n * タブ切り替え用のボタンコンポーネント\n * @param {TabButtonProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst TabButton: React.FC<TabButtonProps> = ({ label, isActive, onClick }) => {\n    // アクティブ状態に応じてCSSクラスを動的に変更します。\n    // isActiveがtrueなら、下線が表示され文字色が青になるスタイルが適用されます。\n    const activeClasses = 'border-b-2 border-blue-600 text-blue-600';\n    const inactiveClasses = 'text-gray-500 hover:text-gray-700';\n\n    return (\n        <button\n            onClick={onClick}\n            className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors duration-200 ease-in-out focus:outline-none ${\n                isActive ? activeClasses : inactiveClasses\n            }`}\n        >\n            {label}\n        </button>\n    );\n}\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default TabButton;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;AAUvB;;;CAGC,GACD,MAAM,YAAsC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE;IACrE,8BAA8B;IAC9B,8CAA8C;IAC9C,MAAM,gBAAgB;IACtB,MAAM,kBAAkB;IAExB,qBACI,8OAAC;QACG,SAAS;QACT,WAAW,CAAC,yGAAyG,EACjH,WAAW,gBAAgB,iBAC7B;kBAED;;;;;;AAGb;uCAGe","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/Controls.tsx"],"sourcesContent":["// Reactライブラリをインポートします。\nimport React from 'react';\n// アイコンコンポーネントをインポートします。\nimport { AddIcon, SearchIcon } from './icons';\n\n// Controlsコンポーネントが受け取るデータ（props）の型を定義します。\ninterface ControlsProps {\n  searchTerm: string; // 現在の検索キーワード\n  onSearchTermChange: (term: string) => void; // 検索キーワードが変更されたときに呼ばれる関数\n  onAddQuestion: () => void; // 「質問を追加」ボタンがクリックされたときに呼ばれる関数\n}\n\n/**\n * 検索バーと追加ボタンを持つコントロールパネルコンポーネント\n * @param {ControlsProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst Controls: React.FC<ControlsProps> = ({ searchTerm, onSearchTermChange, onAddQuestion }) => {\n  return (\n    <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\n      {/* 検索入力フィールド */}\n      <div className=\"relative w-full sm:w-auto flex-grow sm:max-w-xs\">\n        <input\n          type=\"text\"\n          placeholder=\"質問を検索...\"\n          value={searchTerm}\n          onChange={e => onSearchTermChange(e.target.value)}\n          className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        />\n        {/* 検索アイコン */}\n        <SearchIcon className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n      </div>\n      \n      {/* 質問追加ボタン */}\n      <button\n        onClick={onAddQuestion}\n        className=\"w-full sm:w-auto flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-transform transform hover:scale-105 shadow-md\"\n      >\n        <AddIcon />\n        <span>質問を追加</span>\n      </button>\n    </div>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default Controls;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;AAEvB,wBAAwB;AACxB;;;AASA;;;CAGC,GACD,MAAM,WAAoC,CAAC,EAAE,UAAU,EAAE,kBAAkB,EAAE,aAAa,EAAE;IAC1F,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBACC,MAAK;wBACL,aAAY;wBACZ,OAAO;wBACP,UAAU,CAAA,IAAK,mBAAmB,EAAE,MAAM,CAAC,KAAK;wBAChD,WAAU;;;;;;kCAGZ,8OAAC,kJAAU;wBAAC,WAAU;;;;;;;;;;;;0BAIxB,8OAAC;gBACC,SAAS;gBACT,WAAU;;kCAEV,8OAAC,+IAAO;;;;;kCACR,8OAAC;kCAAK;;;;;;;;;;;;;;;;;;AAId;uCAGe","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/QuestionList.tsx"],"sourcesContent":["// Reactライブラリをインポートします。\nimport React from 'react';\n// 質問データの型定義とアイコンコンポーネントをインポートします。\nimport type { Question } from '../types';\nimport { EditIcon, DeleteIcon } from './icons';\n\n// QuestionListコンポーネントが受け取るデータ（props）の型を定義します。\ninterface QuestionListProps {\n  questions: Question[];         // 表示する質問のリスト\n  onEdit: (question: Question) => void; // 編集ボタンがクリックされたときに呼ばれる関数\n  onDelete: (id: number) => void;       // 削除ボタンがクリックされたときに呼ばれる関数\n}\n\n/**\n * 質問の一覧を表示するコンポーネント\n * 画面サイズに応じて、カード形式（モバイル）とテーブル形式（PC）を切り替えます。\n * @param {QuestionListProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst QuestionList: React.FC<QuestionListProps> = ({ questions, onEdit, onDelete }) => {\n  // 表示する質問がない場合のメッセージ\n  if (questions.length === 0) {\n    return <div className=\"text-center py-10 text-gray-500\">質問が見つかりません。</div>;\n  }\n\n  return (\n    <div className=\"flow-root\">\n      {/* --- モバイル用のカード表示 (mdサイズ未満で表示) --- */}\n      <div className=\"space-y-4 md:hidden\">\n        {questions.map(q => (\n          <div key={q.id} className=\"bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200\">\n            <p className=\"text-gray-800 text-sm break-words mb-3\">{q.text}</p>\n            <div className=\"flex justify-between items-center border-t border-gray-200 pt-3 mt-3\">\n              <span className=\"text-xs text-gray-500\">作成日: {q.createdAt}</span>\n              <div className=\"flex items-center space-x-1\">\n                <button onClick={() => onEdit(q)} className=\"text-blue-600 p-2 rounded-full hover:bg-blue-100 transition-colors\"><EditIcon className=\"w-5 h-5\"/></button>\n                <button onClick={() => onDelete(q.id)} className=\"text-red-600 p-2 rounded-full hover:bg-red-100 transition-colors\"><DeleteIcon className=\"w-5 h-5\"/></button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* --- PC用のテーブル表示 (mdサイズ以上で表示) --- */}\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">質問テキスト</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">作成日</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">操作</th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {questions.map(q => (\n              <tr key={q.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-normal text-sm text-gray-700 max-w-xl break-words\">{q.text}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{q.createdAt}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                  <div className=\"flex justify-end space-x-2\">\n                    <button onClick={() => onEdit(q)} className=\"text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-100 transition-colors\"><EditIcon /></button>\n                    <button onClick={() => onDelete(q.id)} className=\"text-red-600 hover:text-red-900 p-2 rounded-full hover:bg-red-100 transition-colors\"><DeleteIcon /></button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default QuestionList;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;AAIvB;;;AASA;;;;CAIC,GACD,MAAM,eAA4C,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE;IAChF,oBAAoB;IACpB,IAAI,UAAU,MAAM,KAAK,GAAG;QAC1B,qBAAO,8OAAC;YAAI,WAAU;sBAAkC;;;;;;IAC1D;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;0BACZ,UAAU,GAAG,CAAC,CAAA,kBACb,8OAAC;wBAAe,WAAU;;0CACxB,8OAAC;gCAAE,WAAU;0CAA0C,EAAE,IAAI;;;;;;0CAC7D,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAK,WAAU;;4CAAwB;4CAAM,EAAE,SAAS;;;;;;;kDACzD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAO,SAAS,IAAM,OAAO;gDAAI,WAAU;0DAAqE,cAAA,8OAAC,gJAAQ;oDAAC,WAAU;;;;;;;;;;;0DACrI,8OAAC;gDAAO,SAAS,IAAM,SAAS,EAAE,EAAE;gDAAG,WAAU;0DAAmE,cAAA,8OAAC,kJAAU;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;uBANtI,EAAE,EAAE;;;;;;;;;;0BAclB,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAM,WAAU;;sCACf,8OAAC;4BAAM,WAAU;sCACf,cAAA,8OAAC;;kDACC,8OAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAiF;;;;;;kDAC3G,8OAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAiF;;;;;;kDAC3G,8OAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAkF;;;;;;;;;;;;;;;;;sCAGhH,8OAAC;4BAAM,WAAU;sCACd,UAAU,GAAG,CAAC,CAAA,kBACb,8OAAC;oCAAc,WAAU;;sDACvB,8OAAC;4CAAG,WAAU;sDAA0E,EAAE,IAAI;;;;;;sDAC9F,8OAAC;4CAAG,WAAU;sDAAqD,EAAE,SAAS;;;;;;sDAC9E,8OAAC;4CAAG,WAAU;sDACZ,cAAA,8OAAC;gDAAI,WAAU;;kEACb,8OAAC;wDAAO,SAAS,IAAM,OAAO;wDAAI,WAAU;kEAAyF,cAAA,8OAAC,gJAAQ;;;;;;;;;;kEAC9I,8OAAC;wDAAO,SAAS,IAAM,SAAS,EAAE,EAAE;wDAAG,WAAU;kEAAsF,cAAA,8OAAC,kJAAU;;;;;;;;;;;;;;;;;;;;;;mCAN/I,EAAE,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgB3B;uCAGe","debugId":null}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/Pagination.tsx"],"sourcesContent":["// Reactライブラリをインポートします。\nimport React from 'react';\n\n// Paginationコンポーネントが受け取るデータ（props）の型を定義します。\ninterface PaginationProps {\n  currentPage: number; // 現在のページ番号\n  totalPages: number;  // 全体のページ数\n  onPageChange: (page: number) => void; // ページ番号が変更されたときに呼ばれる関数\n}\n\n/**\n * ページネーション（ページ送り）を表示・操作するためのコンポーネント\n * @param {PaginationProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {\n  // 前のページへ移動する処理\n  const goToPreviousPage = () => {\n    // 現在のページが1より大きい場合のみ、ページ番号を1減らす\n    onPageChange(Math.max(1, currentPage - 1));\n  };\n\n  // 次のページへ移動する処理\n  const goToNextPage = () => {\n    // 現在のページが総ページ数より小さい場合のみ、ページ番号を1増やす\n    onPageChange(Math.min(totalPages, currentPage + 1));\n  };\n  \n  return (\n    <div className=\"flex flex-col sm:flex-row justify-between items-center mt-6 gap-4 sm:gap-0\">\n      {/* 現在のページと総ページ数を表示 */}\n      <span className=\"text-sm text-gray-700\">\n        ページ <span className=\"font-semibold\">{currentPage}</span> / <span className=\"font-semibold\">{totalPages}</span>\n      </span>\n      \n      {/* ページ移動ボタン */}\n      <div className=\"flex space-x-2\">\n        <button \n          onClick={goToPreviousPage} \n          disabled={currentPage === 1} // 最初のページでは「前へ」ボタンを無効化\n          className=\"px-4 py-2 text-sm text-gray-700 bg-white border rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          前へ\n        </button>\n        <button \n          onClick={goToNextPage} \n          disabled={currentPage === totalPages} // 最後のページでは「次へ」ボタンを無効化\n          className=\"px-4 py-2 text-sm text-gray-700 bg-white border rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          次へ\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default Pagination;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;AAUvB;;;CAGC,GACD,MAAM,aAAwC,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE;IACtF,eAAe;IACf,MAAM,mBAAmB;QACvB,+BAA+B;QAC/B,aAAa,KAAK,GAAG,CAAC,GAAG,cAAc;IACzC;IAEA,eAAe;IACf,MAAM,eAAe;QACnB,mCAAmC;QACnC,aAAa,KAAK,GAAG,CAAC,YAAY,cAAc;IAClD;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAK,WAAU;;oBAAwB;kCAClC,8OAAC;wBAAK,WAAU;kCAAiB;;;;;;oBAAmB;kCAAG,8OAAC;wBAAK,WAAU;kCAAiB;;;;;;;;;;;;0BAI9F,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBACC,SAAS;wBACT,UAAU,gBAAgB;wBAC1B,WAAU;kCACX;;;;;;kCAGD,8OAAC;wBACC,SAAS;wBACT,UAAU,gBAAgB;wBAC1B,WAAU;kCACX;;;;;;;;;;;;;;;;;;AAMT;uCAGe","debugId":null}},
    {"offset": {"line": 715, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/Modal.tsx"],"sourcesContent":["\nimport React, { ReactNode } from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: ReactNode;\n  title: string;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children, title }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-lg animate-fade-in-up\">\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">{title}</h3>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </div>\n       <style>{`\n          @keyframes fade-in-up {\n            0% {\n              opacity: 0;\n              transform: translateY(20px);\n            }\n            100% {\n              opacity: 1;\n              transform: translateY(0);\n            }\n          }\n          .animate-fade-in-up {\n            animation: fade-in-up 0.3s ease-out forwards;\n          }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Modal;\n"],"names":[],"mappings":";;;;;;AAUA,MAAM,QAA8B,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE;IACvE,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAuC;;;;;;0CACrD,8OAAC;gCACC,SAAS;gCACT,WAAU;0CAEV,cAAA,8OAAC;oCAAI,OAAM;oCAA6B,WAAU;oCAAU,MAAK;oCAAO,SAAQ;oCAAY,QAAO;8CACjG,cAAA,8OAAC;wCAAK,eAAc;wCAAQ,gBAAe;wCAAQ,aAAa;wCAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;kCAI3E,8OAAC;wBAAI,WAAU;kCACZ;;;;;;;;;;;;0BAGJ,8OAAC;0BAAO,CAAC;;;;;;;;;;;;;;MAcV,CAAC;;;;;;;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 822, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/QuestionModal.tsx"],"sourcesContent":["// Reactから必要な機能をインポートします。\nimport React, { useState, useEffect } from 'react';\n// 型定義と汎用モーダルコンポーネントをインポートします。\nimport type { Question, QuestionType } from '../types';\nimport Modal from './Modal';\n\n// QuestionModalコンポーネントが受け取るデータ（props）の型を定義します。\ninterface QuestionModalProps {\n  isOpen: boolean; // モーダルが開いているかどうか\n  onClose: () => void; // モーダルを閉じるための関数\n  onSave: (questionText: string, type: QuestionType) => void; // 質問を保存するための関数\n  question: Question | null; // 編集対象の質問データ（新規追加の場合はnull）\n  maxQuestions: number; // 登録できる質問の最大数\n  currentQuestionCount: number; // 現在の質問数\n  activeTab: QuestionType; // 現在選択されているタブの種類\n}\n\n/**\n * 質問の新規追加または編集を行うためのモーダル（ポップアップ）コンポーネント\n * @param {QuestionModalProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst QuestionModal: React.FC<QuestionModalProps> = ({ isOpen, onClose, onSave, question, maxQuestions, currentQuestionCount, activeTab }) => {\n    // 入力された質問テキストの状態を管理します。\n    const [text, setText] = useState('');\n    // 選択された質問の種別（ルーレット or スロット）の状態を管理します。\n    const [type, setType] = useState<QuestionType>(activeTab);\n    // エラーメッセージの状態を管理します。\n    const [error, setError] = useState('');\n\n    // `question`（編集対象）やモーダルの表示状態が変わった時に実行される副作用フック\n    useEffect(() => {\n        // 編集対象の質問があればそのテキストとタイプを、なければ空文字と現在のアクティブなタブをセットします。\n        setText(question?.text || '');\n        setType(question?.type || activeTab);\n        setError(''); // エラーメッセージをリセット\n    }, [question, isOpen, activeTab]);\n\n    // モーダルが編集モードかどうかを判定します。\n    const isEditing = !!question;\n    // 質問数が上限に達しているかどうかを判定します（新規追加時のみ）。\n    const isAtLimit = !isEditing && currentQuestionCount >= maxQuestions;\n\n    /**\n     * 保存ボタンがクリックされたときに実行される関数\n     */\n    const handleSubmit = () => {\n        // 入力値のバリデーション（検証）\n        if (text.trim().length === 0) {\n            setError('質問テキストは空にできません。');\n            return;\n        }\n        if (text.length > 500) {\n            setError('質問テキストは500文字を超えることはできません。');\n            return;\n        }\n        if(isAtLimit) {\n            setError(`新しい質問は追加できません。上限の${maxQuestions}件に達しました。`);\n            return;\n        }\n        // 親コンポーネントから渡された保存関数を実行\n        onSave(text, type);\n        onClose(); // モーダルを閉じる\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title={isEditing ? '質問を編集' : '新しい質問を追加'}>\n            <div className=\"space-y-4\">\n                 {/* 質問種別選択ラジオボタン */}\n                 <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-gray-700\">種別</label>\n                    <div className=\"flex space-x-4\">\n                        <label className=\"flex items-center\">\n                            <input \n                                type=\"radio\" \n                                name=\"questionType\" \n                                value=\"roulette\" \n                                checked={type === 'roulette'}\n                                onChange={() => setType('roulette')}\n                                className=\"form-radio h-4 w-4 text-blue-600\"\n                            />\n                            <span className=\"ml-2 text-gray-700\">ルーレット</span>\n                        </label>\n                        <label className=\"flex items-center\">\n                            <input \n                                type=\"radio\" \n                                name=\"questionType\" \n                                value=\"slot\" \n                                checked={type === 'slot'}\n                                onChange={() => setType('slot')}\n                                className=\"form-radio h-4 w-4 text-blue-600\"\n                            />\n                            <span className=\"ml-2 text-gray-700\">スロット</span>\n                        </label>\n                    </div>\n                </div>\n                {/* 質問テキスト入力エリア */}\n                <textarea\n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                    rows={5}\n                    className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"質問テキストを入力...\"\n                    maxLength={500}\n                    disabled={isAtLimit}\n                />\n                <div className=\"text-right text-sm text-gray-500\">{text.length} / 500</div>\n                 {error && <p className=\"text-red-500 text-sm\">{error}</p>}\n                {/* ボタンエリア */}\n                <div className=\"flex justify-end space-x-4\">\n                    <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\">キャンセル</button>\n                    <button onClick={handleSubmit} disabled={isAtLimit} className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors\">質問を保存</button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default QuestionModal;\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;;AACzB;AAGA;;;;AAaA;;;CAGC,GACD,MAAM,gBAA8C,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,oBAAoB,EAAE,SAAS,EAAE;IACrI,wBAAwB;IACxB,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAC;IACjC,sCAAsC;IACtC,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAe;IAC/C,qBAAqB;IACrB,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAC;IAEnC,+CAA+C;IAC/C,IAAA,kNAAS,EAAC;QACN,qDAAqD;QACrD,QAAQ,UAAU,QAAQ;QAC1B,QAAQ,UAAU,QAAQ;QAC1B,SAAS,KAAK,gBAAgB;IAClC,GAAG;QAAC;QAAU;QAAQ;KAAU;IAEhC,wBAAwB;IACxB,MAAM,YAAY,CAAC,CAAC;IACpB,mCAAmC;IACnC,MAAM,YAAY,CAAC,aAAa,wBAAwB;IAExD;;KAEC,GACD,MAAM,eAAe;QACjB,kBAAkB;QAClB,IAAI,KAAK,IAAI,GAAG,MAAM,KAAK,GAAG;YAC1B,SAAS;YACT;QACJ;QACA,IAAI,KAAK,MAAM,GAAG,KAAK;YACnB,SAAS;YACT;QACJ;QACA,IAAG,WAAW;YACV,SAAS,CAAC,iBAAiB,EAAE,aAAa,QAAQ,CAAC;YACnD;QACJ;QACA,wBAAwB;QACxB,OAAO,MAAM;QACb,WAAW,WAAW;IAC1B;IAEA,qBACI,8OAAC,+IAAK;QAAC,QAAQ;QAAQ,SAAS;QAAS,OAAO,YAAY,UAAU;kBAClE,cAAA,8OAAC;YAAI,WAAU;;8BAEV,8OAAC;oBAAI,WAAU;;sCACZ,8OAAC;4BAAM,WAAU;sCAAoC;;;;;;sCACrD,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,WAAU;;sDACb,8OAAC;4CACG,MAAK;4CACL,MAAK;4CACL,OAAM;4CACN,SAAS,SAAS;4CAClB,UAAU,IAAM,QAAQ;4CACxB,WAAU;;;;;;sDAEd,8OAAC;4CAAK,WAAU;sDAAqB;;;;;;;;;;;;8CAEzC,8OAAC;oCAAM,WAAU;;sDACb,8OAAC;4CACG,MAAK;4CACL,MAAK;4CACL,OAAM;4CACN,SAAS,SAAS;4CAClB,UAAU,IAAM,QAAQ;4CACxB,WAAU;;;;;;sDAEd,8OAAC;4CAAK,WAAU;sDAAqB;;;;;;;;;;;;;;;;;;;;;;;;8BAKjD,8OAAC;oBACG,OAAO;oBACP,UAAU,CAAC,IAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;oBACvC,MAAM;oBACN,WAAU;oBACV,aAAY;oBACZ,WAAW;oBACX,UAAU;;;;;;8BAEd,8OAAC;oBAAI,WAAU;;wBAAoC,KAAK,MAAM;wBAAC;;;;;;;gBAC7D,uBAAS,8OAAC;oBAAE,WAAU;8BAAwB;;;;;;8BAEhD,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAO,SAAS;4BAAS,WAAU;sCAAqF;;;;;;sCACzH,8OAAC;4BAAO,SAAS;4BAAc,UAAU;4BAAW,WAAU;sCAAmI;;;;;;;;;;;;;;;;;;;;;;;AAKrN;uCAEe","debugId":null}},
    {"offset": {"line": 1046, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/ConfirmationDialog.tsx"],"sourcesContent":["// Reactライブラリと汎用モーダルコンポーネントをインポートします。\nimport React from 'react';\nimport Modal from './Modal';\n\n// ConfirmationDialogコンポーネントが受け取るデータ（props）の型を定義します。\ninterface ConfirmationDialogProps {\n  isOpen: boolean;      // ダイアログが開いているかどうか\n  onClose: () => void;    // ダイアログを閉じるための関数\n  onConfirm: () => void;  // 確認（削除実行）ボタンが押されたときの関数\n  title: string;        // ダイアログのタイトル\n  message: string;      // 表示する確認メッセージ\n}\n\n/**\n * 操作の実行前に確認を求めるためのダイアログコンポーネント\n * @param {ConfirmationDialogProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({ isOpen, onClose, onConfirm, title, message }) => {\n  // isOpenがfalseの場合は何も表示しない\n  if (!isOpen) return null;\n\n  return (\n    // 汎用的なModalコンポーネントを土台として使います\n    <Modal isOpen={isOpen} onClose={onClose} title={title}>\n      {/* 確認メッセージ */}\n      <p className=\"text-gray-600 mb-6\">{message}</p>\n      \n      {/* ボタンエリア */}\n      <div className=\"flex justify-end space-x-4\">\n        <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\">キャンセル</button>\n        <button onClick={onConfirm} className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\">削除を実行</button>\n      </div>\n    </Modal>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default ConfirmationDialog;\n"],"names":[],"mappings":"AAAA,qCAAqC;;;;;;AAErC;;;AAWA;;;CAGC,GACD,MAAM,qBAAwD,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE;IAC3G,0BAA0B;IAC1B,IAAI,CAAC,QAAQ,OAAO;IAEpB,OACE,6BAA6B;kBAC7B,8OAAC,+IAAK;QAAC,QAAQ;QAAQ,SAAS;QAAS,OAAO;;0BAE9C,8OAAC;gBAAE,WAAU;0BAAsB;;;;;;0BAGnC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAO,SAAS;wBAAS,WAAU;kCAAqF;;;;;;kCACzH,8OAAC;wBAAO,SAAS;wBAAW,WAAU;kCAAgF;;;;;;;;;;;;;;;;;;AAI9H;uCAGe","debugId":null}},
    {"offset": {"line": 1114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/AdminDashboard.tsx"],"sourcesContent":["// Reactから必要な機能をインポートします。\n// useState: コンポーネント内で状態（データ）を管理します。\n// useMemo: 計算結果を記憶（メモ化）して、不要な再計算を防ぎパフォーマンスを向上させます。\n// useCallback: 関数の不要な再作成を防ぎ、パフォーマンスを向上させます。\nimport React, { useState, useMemo, useCallback } from 'react';\n\n// アプリケーションで使う型定義や定数をインポートします。\nimport type { Question, QuestionType } from '../types';\nimport { INITIAL_QUESTIONS, MAX_QUESTIONS, QUESTIONS_PER_PAGE } from '../constants';\n\n// UIを構成する子コンポーネントをインポートします。\nimport Header from './Header';\nimport TabButton from './TabButton';\nimport Controls from './Controls';\nimport QuestionList from './QuestionList';\nimport Pagination from './Pagination';\nimport QuestionModal from './QuestionModal';\nimport ConfirmationDialog from './ConfirmationDialog';\n\n\n// AdminDashboardコンポーネントが受け取るデータ（props）の型を定義します。\ninterface AdminDashboardProps {\n  onLogout: () => void; // ログアウトを実行する関数\n}\n\n/**\n * 質問管理ダッシュボードのメインコンポーネント\n * 質問の表示、追加、編集、削除など、管理機能の全体を統括します。\n * @param {AdminDashboardProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst AdminDashboard: React.FC<AdminDashboardProps> = ({ onLogout }) => {\n    // --- 状態管理(useState) ---\n    // ここで管理しているデータが変更されると、画面が自動的に再描画されます。\n\n    // 全ての質問データを管理します。初期値として`INITIAL_QUESTIONS`を使います。\n    const [questions, setQuestions] = useState<Question[]>(INITIAL_QUESTIONS);\n    // 検索バーに入力されたテキストを管理します。\n    const [searchTerm, setSearchTerm] = useState('');\n    // 現在表示しているページの番号を管理します。\n    const [currentPage, setCurrentPage] = useState(1);\n    // 現在選択されているタブ（'roulette' or 'slot'）を管理します。\n    const [activeTab, setActiveTab] = useState<QuestionType>('roulette');\n    // 編集中の質問データを管理します。新規追加の場合は`null`になります。\n    const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);\n    // 削除しようとしている質問のIDを管理します。削除確認ダイアログを表示するために使います。\n    const [deletingQuestionId, setDeletingQuestionId] = useState<number | null>(null);\n    // 質問追加・編集モーダル（ポップアップ画面）の表示状態を管理します。\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    // --- データ加工(useMemo) ---\n    // `questions`, `searchTerm`, `activeTab`が変更された時だけ再計算されます。\n\n    // 表示する質問をフィルタリングします。\n    const filteredQuestions = useMemo(() => {\n        return questions\n            .filter(q => q.type === activeTab) // 選択中のタブと同じタイプの質問だけを残す\n            .filter(q => q.text.toLowerCase().includes(searchTerm.toLowerCase())); // 検索ワードを含む質問だけを残す\n    }, [questions, searchTerm, activeTab]);\n\n    // フィルタリングされた質問を、現在のページに合わせて切り出します。\n    const paginatedQuestions = useMemo(() => {\n        const startIndex = (currentPage - 1) * QUESTIONS_PER_PAGE;\n        return filteredQuestions.slice(startIndex, startIndex + QUESTIONS_PER_PAGE);\n    }, [filteredQuestions, currentPage]);\n    \n    // 全ページ数を計算します。\n    const totalPages = Math.ceil(filteredQuestions.length / QUESTIONS_PER_PAGE);\n\n    // --- イベントハンドラ(useCallback) ---\n    // これらの関数は、ユーザーの操作（クリックなど）によって呼び出されます。\n\n    // タブがクリックされた時に呼ばれる関数\n    const handleTabChange = (tab: QuestionType) => {\n        setActiveTab(tab);\n        setCurrentPage(1); // タブを切り替えたら、1ページ目に戻す\n    }\n\n    // 「質問を追加」ボタンが押された時に呼ばれる関数\n    const handleAddQuestion = useCallback(() => {\n        setEditingQuestion(null); // 編集中の質問はないのでnullに\n        setIsModalOpen(true); // モーダルを開く\n    }, []);\n\n    // 質問の「編集」ボタンが押された時に呼ばれる関数\n    const handleEditQuestion = useCallback((question: Question) => {\n        setEditingQuestion(question); // 編集対象の質問をセット\n        setIsModalOpen(true); // モーダルを開く\n    }, []);\n\n    // 質問の「削除」ボタンが押された時に呼ばれる関数\n    const handleDeleteQuestion = useCallback((id: number) => {\n        setDeletingQuestionId(id); // 削除対象の質問IDをセット（確認ダイアログが表示される）\n    }, []);\n\n    // 削除確認ダイアログで「削除を実行」が押された時に呼ばれる関数\n    const confirmDelete = useCallback(() => {\n        if (deletingQuestionId !== null) {\n            setQuestions(prev => prev.filter(q => q.id !== deletingQuestionId)); // IDが一致しない質問だけを残す＝削除\n            setDeletingQuestionId(null); // 削除対象IDをリセット\n        }\n    }, [deletingQuestionId]);\n    \n    // 質問追加・編集モーダルで「保存」が押された時に呼ばれる関数\n    const handleSaveQuestion = useCallback((text: string, type: QuestionType) => {\n        if (editingQuestion) {\n            // 編集の場合\n            setQuestions(prev => prev.map(q => q.id === editingQuestion.id ? { ...q, text, type } : q));\n        } else {\n            // 新規追加の場合\n             if (questions.length >= MAX_QUESTIONS) {\n                alert(`${MAX_QUESTIONS}件より多くの質問は追加できません。`);\n                return;\n            }\n            const newQuestion: Question = {\n                id: Math.max(0, ...questions.map(q => q.id)) + 1, // 新しいIDを生成\n                text,\n                createdAt: new Date().toISOString().split('T')[0],\n                type,\n            };\n            setQuestions(prev => [newQuestion, ...prev]); // 質問リストの先頭に追加\n        }\n    }, [editingQuestion, questions]);\n\n    // --- レンダリング ---\n    // 画面に表示するHTMLのようなものを返します (JSX)。\n    return (\n        <div className=\"min-h-screen bg-gray-100 font-sans\">\n            <Header\n                questionCount={questions.length}\n                maxQuestions={MAX_QUESTIONS}\n                onLogout={onLogout}\n            />\n\n            <main className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n                <div className=\"bg-white p-4 sm:p-6 rounded-lg shadow-lg\">\n                    {/* タブ */}\n                    <div className=\"border-b border-gray-200 mb-6\">\n                        <nav className=\"-mb-px flex space-x-6\" aria-label=\"Tabs\">\n                            <TabButton label=\"ルーレット\" isActive={activeTab === 'roulette'} onClick={() => handleTabChange('roulette')} />\n                            <TabButton label=\"スロット\" isActive={activeTab === 'slot'} onClick={() => handleTabChange('slot')} />\n                        </nav>\n                    </div>\n\n                    <Controls\n                        searchTerm={searchTerm}\n                        onSearchTermChange={setSearchTerm}\n                        onAddQuestion={handleAddQuestion}\n                    />\n\n                    <QuestionList\n                        questions={paginatedQuestions}\n                        onEdit={handleEditQuestion}\n                        onDelete={handleDeleteQuestion}\n                    />\n                    \n                    {totalPages > 1 && (\n                      <Pagination\n                        currentPage={currentPage}\n                        totalPages={totalPages}\n                        onPageChange={setCurrentPage}\n                      />\n                    )}\n                </div>\n            </main>\n            \n            <QuestionModal \n              isOpen={isModalOpen}\n              onClose={() => setIsModalOpen(false)}\n              onSave={handleSaveQuestion}\n              question={editingQuestion}\n              maxQuestions={MAX_QUESTIONS}\n              currentQuestionCount={questions.length}\n              activeTab={activeTab}\n            />\n\n            <ConfirmationDialog\n              isOpen={deletingQuestionId !== null}\n              onClose={() => setDeletingQuestionId(null)}\n              onConfirm={confirmDelete}\n              title=\"削除の確認\"\n              message=\"この質問を削除してもよろしいですか？この操作は元に戻せません。\"\n            />\n        </div>\n    );\n};\n\nexport default AdminDashboard;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1373, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/components/LoginPage.tsx"],"sourcesContent":["// Reactから必要な機能をインポートします。\n// useState: コンポーネント内で状態（データ）を管理するために使います。\nimport React, { useState } from 'react';\n\n// LoginPageコンポーネントが受け取るデータ（props）の型を定義します。\ninterface LoginPageProps {\n    onLogin: (password: string) => void; // ログインを試みるための関数\n    error: string; // 表示するエラーメッセージ\n}\n\n/**\n * ログイン画面を表示するためのコンポーネント\n * @param {LoginPageProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst LoginPage: React.FC<LoginPageProps> = ({ onLogin, error }) => {\n    // ユーザー名入力フィールドの状態を管理します。初期値は'admin'です。\n    const [username, setUsername] = useState('admin');\n    // パスワード入力フィールドの状態を管理します。初期値は空です。\n    const [password, setPassword] = useState('');\n\n    /**\n     * フォームが送信されたとき（ログインボタンが押されたとき）に実行される関数\n     * @param e - フォーム送信イベントのオブジェクト\n     */\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault(); // フォーム送信時のページの再読み込みを防ぎます。\n        onLogin(password); // 親コンポーネントから渡されたonLogin関数を呼び出します。\n    };\n\n    // 画面に表示する内容（ログインフォーム）を返します。\n    return (\n        <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\n            <div className=\"w-full max-w-md bg-white p-6 sm:p-8 rounded-xl shadow-lg\">\n                <h1 className=\"text-3xl font-bold text-center text-gray-800 mb-2\">管理者ログイン</h1>\n                <p className=\"text-center text-gray-500 mb-8\">質問管理ダッシュボード</p>\n                <form onSubmit={handleSubmit}>\n                    {/* ユーザー名入力欄 */}\n                    <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"username\">\n                            ユーザー名\n                        </label>\n                        <input\n                            id=\"username\"\n                            type=\"text\"\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                            className=\"shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            placeholder=\"admin\"\n                            readOnly // このフィールドは編集不可にしています。\n                        />\n                    </div>\n                    {/* パスワード入力欄 */}\n                    <div className=\"mb-6\">\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\n                            パスワード\n                        </label>\n                        <input\n                            id=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            className=\"shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            placeholder=\"password\"\n                        />\n                    </div>\n                    {/* エラーメッセージ（エラーがある場合のみ表示） */}\n                    {error && <p className=\"text-red-500 text-xs italic mb-4\">{error}</p>}\n                    {/* サインインボタン */}\n                    <div className=\"flex items-center justify-between\">\n                        <button\n                            type=\"submit\"\n                            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-transform transform hover:scale-105\"\n                        >\n                            サインイン\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default LoginPage;\n"],"names":[],"mappings":"AAAA,yBAAyB;AACzB,0CAA0C;;;;;;AAC1C;;;AAQA;;;CAGC,GACD,MAAM,YAAsC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE;IAC3D,uCAAuC;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IACzC,iCAAiC;IACjC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IAEzC;;;KAGC,GACD,MAAM,eAAe,CAAC;QAClB,EAAE,cAAc,IAAI,0BAA0B;QAC9C,QAAQ,WAAW,kCAAkC;IACzD;IAEA,4BAA4B;IAC5B,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC;oBAAG,WAAU;8BAAoD;;;;;;8BAClE,8OAAC;oBAAE,WAAU;8BAAiC;;;;;;8BAC9C,8OAAC;oBAAK,UAAU;;sCAEZ,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,WAAU;oCAA6C,SAAQ;8CAAW;;;;;;8CAGjF,8OAAC;oCACG,IAAG;oCACH,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oCAC3C,WAAU;oCACV,aAAY;oCACZ,QAAQ;;;;;;;;;;;;sCAIhB,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAM,WAAU;oCAA6C,SAAQ;8CAAW;;;;;;8CAGjF,8OAAC;oCACG,IAAG;oCACH,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oCAC3C,WAAU;oCACV,aAAY;;;;;;;;;;;;wBAInB,uBAAS,8OAAC;4BAAE,WAAU;sCAAoC;;;;;;sCAE3D,8OAAC;4BAAI,WAAU;sCACX,cAAA,8OAAC;gCACG,MAAK;gCACL,WAAU;0CACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQzB;uCAGe","debugId":null}},
    {"offset": {"line": 1531, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/admin/App.tsx"],"sourcesContent":["// Reactから必要な機能をインポートします。\n// useState: コンポーネント内で状態（データ）を管理するために使います。\n// useCallback: 関数の不要な再作成を防ぎ、パフォーマンスを向上させるために使います。\nimport React, { useState, useCallback } from 'react';\n\n// 他のファイルからコンポーネントをインポートします。\nimport AdminDashboard from './components/AdminDashboard';\nimport LoginPage from './components/LoginPage';\n\n/**\n * アプリケーションのメインコンポーネント\n * このコンポーネントが、アプリ全体の中心的な役割を果たします。\n * ログインしているかどうかで、表示する画面を切り替えます。\n */\nconst App: React.FC = () => {\n  // 認証状態を管理するための変数です。\n  // `isAuthenticated`が`true`ならログイン済み、`false`なら未ログインと判断します。\n  // `useState(false)`は、最初の状態が「未ログイン」であることを意味します。\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // ログインエラーメッセージを管理するための変数です。\n  const [error, setError] = useState('');\n\n  /**\n   * ログイン処理を行う関数\n   * @param password - ユーザーが入力したパスワード\n   */\n  const handleLogin = useCallback((password: string) => {\n    // ここでは簡単にするため、パスワードが'password'かどうかだけで認証しています。\n    // 実際のアプリケーションでは、より安全な方法で認証を行います。\n    if (password === 'password') {\n      setIsAuthenticated(true); // 認証成功\n      setError(''); // エラーメッセージをクリア\n    } else {\n      // パスワードが間違っていた場合\n      setError('パスワードが無効です。ヒント：「password」です');\n    }\n  }, []); // []は、この関数が他の変数に依存していないことを示します。\n\n  /**\n   * ログアウト処理を行う関数\n   */\n  const handleLogout = useCallback(() => {\n    setIsAuthenticated(false); // 認証状態を「未ログイン」に戻します。\n  }, []); // []は、この関数が他の変数に依存していないことを示します。\n\n  // 画面に表示する内容を返します。\n  return (\n    <>\n      {/* \n        三項演算子という書き方で、条件によって表示する内容を変えています。\n        「もし`isAuthenticated`が`true`なら、`AdminDashboard`を表示し、\n        そうでなければ（`false`なら）、`LoginPage`を表示する」という意味です。\n      */}\n      {isAuthenticated ? (\n        <AdminDashboard onLogout={handleLogout} />\n      ) : (\n        <LoginPage onLogin={handleLogin} error={error} />\n      )}\n    </>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default App;\n"],"names":[],"mappings":"AAAA,yBAAyB;AACzB,0CAA0C;AAC1C,kDAAkD;;;;;;AAClD;AAEA,4BAA4B;AAC5B;AACA;;;;;AAEA;;;;CAIC,GACD,MAAM,MAAgB;IACpB,oBAAoB;IACpB,yDAAyD;IACzD,+CAA+C;IAC/C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,IAAA,iNAAQ,EAAC;IAEvD,4BAA4B;IAC5B,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAC;IAEnC;;;GAGC,GACD,MAAM,cAAc,IAAA,oNAAW,EAAC,CAAC;QAC/B,8CAA8C;QAC9C,iCAAiC;QACjC,IAAI,aAAa,YAAY;YAC3B,mBAAmB,OAAO,OAAO;YACjC,SAAS,KAAK,eAAe;QAC/B,OAAO;YACL,iBAAiB;YACjB,SAAS;QACX;IACF,GAAG,EAAE,GAAG,gCAAgC;IAExC;;GAEC,GACD,MAAM,eAAe,IAAA,oNAAW,EAAC;QAC/B,mBAAmB,QAAQ,qBAAqB;IAClD,GAAG,EAAE,GAAG,gCAAgC;IAExC,kBAAkB;IAClB,qBACE;kBAMG,gCACC,8OAAC,wJAAc;YAAC,UAAU;;;;;qEAE1B,8OAAC,mJAAS;YAAC,SAAS;YAAa,OAAO;;;;;;;AAIhD;uCAGe","debugId":null}},
    {"offset": {"line": 1600, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Downloads/roulette-app-main/src/app/admin/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from \"react\";\r\nimport AdminApp from \"../../admin/App\"; // 管理画面のApp.tsxを読み込み\r\n\r\nexport default function AdminPage() {\r\n  return <AdminApp />;\r\n}\r\n"],"names":[],"mappings":";;;;;AAGA,0MAAwC,oBAAoB;AAH5D;;;AAKe,SAAS;IACtB,qBAAO,8OAAC,+HAAQ;;;;;AAClB","debugId":null}}]
}