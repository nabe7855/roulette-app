{"version":3,"sources":["turbopack:///[project]/src/admin/App.tsx","turbopack:///[project]/src/admin/constants.ts","turbopack:///[project]/src/admin/components/icons.tsx","turbopack:///[project]/src/admin/components/Header.tsx","turbopack:///[project]/src/admin/components/TabButton.tsx","turbopack:///[project]/src/admin/components/Controls.tsx","turbopack:///[project]/src/admin/components/QuestionList.tsx","turbopack:///[project]/src/admin/components/Pagination.tsx","turbopack:///[project]/src/admin/components/Modal.tsx","turbopack:///[project]/src/admin/components/QuestionModal.tsx","turbopack:///[project]/src/admin/components/ConfirmationDialog.tsx","turbopack:///[project]/src/admin/components/AdminDashboard.tsx","turbopack:///[project]/src/admin/components/LoginPage.tsx","turbopack:///[project]/src/app/admin/page.tsx"],"sourcesContent":["// Reactから必要な機能をインポートします。\n// useState: コンポーネント内で状態（データ）を管理するために使います。\n// useCallback: 関数の不要な再作成を防ぎ、パフォーマンスを向上させるために使います。\nimport React, { useState, useCallback } from 'react';\n\n// 他のファイルからコンポーネントをインポートします。\nimport AdminDashboard from './components/AdminDashboard';\nimport LoginPage from './components/LoginPage';\n\n/**\n * アプリケーションのメインコンポーネント\n * このコンポーネントが、アプリ全体の中心的な役割を果たします。\n * ログインしているかどうかで、表示する画面を切り替えます。\n */\nconst App: React.FC = () => {\n  // 認証状態を管理するための変数です。\n  // `isAuthenticated`が`true`ならログイン済み、`false`なら未ログインと判断します。\n  // `useState(false)`は、最初の状態が「未ログイン」であることを意味します。\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // ログインエラーメッセージを管理するための変数です。\n  const [error, setError] = useState('');\n\n  /**\n   * ログイン処理を行う関数\n   * @param password - ユーザーが入力したパスワード\n   */\n  const handleLogin = useCallback((password: string) => {\n    // ここでは簡単にするため、パスワードが'password'かどうかだけで認証しています。\n    // 実際のアプリケーションでは、より安全な方法で認証を行います。\n    if (password === 'password') {\n      setIsAuthenticated(true); // 認証成功\n      setError(''); // エラーメッセージをクリア\n    } else {\n      // パスワードが間違っていた場合\n      setError('パスワードが無効です。ヒント：「password」です');\n    }\n  }, []); // []は、この関数が他の変数に依存していないことを示します。\n\n  /**\n   * ログアウト処理を行う関数\n   */\n  const handleLogout = useCallback(() => {\n    setIsAuthenticated(false); // 認証状態を「未ログイン」に戻します。\n  }, []); // []は、この関数が他の変数に依存していないことを示します。\n\n  // 画面に表示する内容を返します。\n  return (\n    <>\n      {/* \n        三項演算子という書き方で、条件によって表示する内容を変えています。\n        「もし`isAuthenticated`が`true`なら、`AdminDashboard`を表示し、\n        そうでなければ（`false`なら）、`LoginPage`を表示する」という意味です。\n      */}\n      {isAuthenticated ? (\n        <AdminDashboard onLogout={handleLogout} />\n      ) : (\n        <LoginPage onLogin={handleLogin} error={error} />\n      )}\n    </>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default App;\n","import type { Question } from \"./types\";\n\nexport const MAX_QUESTIONS = 200;\nexport const QUESTIONS_PER_PAGE = 10;\n\nexport const INITIAL_QUESTIONS: Question[] = Array.from({ length: 25 }, (_, i) => ({\n  id: i + 1,\n  text: `これはサンプル質問${i + 1}です。フランスの首都はどこですか？答えはパリです。これはテキストの折り返しをテストするための長い質問です。`,\n  createdAt: new Date(Date.now() - i * 1000 * 60 * 60 * 24).toISOString().split('T')[0],\n  type: i % 2 === 0 ? 'roulette' : 'slot',\n}));","\nimport React from 'react';\n\nexport const EditIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L15.232 5.232z\" />\n  </svg>\n);\n\nexport const DeleteIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n  </svg>\n);\n\nexport const AddIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n  </svg>\n);\n\nexport const LogoutIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n    </svg>\n);\n\nexport const SearchIcon: React.FC<{ className?: string }> = ({ className = \"w-5 h-5\" }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n    </svg>\n);\n","// Reactライブラリをインポートします。\nimport React from 'react';\n// アイコンコンポーネントをインポートします。\nimport { LogoutIcon } from './icons';\n\n// Headerコンポーネントが受け取るデータ（props）の型を定義します。\ninterface HeaderProps {\n  questionCount: number;  // 現在の質問の総数\n  maxQuestions: number;     // 登録できる質問の最大数\n  onLogout: () => void;     // ログアウト処理を実行する関数\n}\n\n/**\n * ダッシュボードの上部に表示されるヘッダーコンポーネント\n * @param {HeaderProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst Header: React.FC<HeaderProps> = ({ questionCount, maxQuestions, onLogout }) => {\n  // 質問数が上限の90%を超えたかどうかを判定します。\n  const isApproachingLimit = questionCount > maxQuestions * 0.9;\n\n  return (\n    <header className=\"bg-white shadow-md sticky top-0 z-10\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex flex-col sm:flex-row justify-between sm:items-center py-4 gap-4 sm:gap-0\">\n          {/* ページのタイトル */}\n          <h1 className=\"text-2xl font-bold text-gray-800 text-center sm:text-left\">質問ダッシュボード</h1>\n          \n          {/* 右側の情報エリア */}\n          <div className=\"w-full sm:w-auto flex justify-between sm:justify-end items-center space-x-4\">\n            {/* 質問数の表示 */}\n            <div className=\"text-sm font-medium\">\n              <span className={isApproachingLimit ? 'text-red-500' : 'text-gray-600'}>\n                合計: {questionCount}/{maxQuestions}\n              </span>\n            </div>\n            {/* ログアウトボタン */}\n            <button onClick={onLogout} className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600 transition-colors\">\n              <LogoutIcon />\n              <span className=\"hidden sm:inline\">ログアウト</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default Header;\n","// Reactライブラリをインポートします。\nimport React from 'react';\n\n// TabButtonコンポーネントが受け取るデータ（props）の型を定義します。\ninterface TabButtonProps {\n    label: string;      // ボタンに表示するテキスト\n    isActive: boolean;  // このタブが現在アクティブ（選択されている）かどうか\n    onClick: () => void; // ボタンがクリックされたときに呼ばれる関数\n}\n\n/**\n * タブ切り替え用のボタンコンポーネント\n * @param {TabButtonProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst TabButton: React.FC<TabButtonProps> = ({ label, isActive, onClick }) => {\n    // アクティブ状態に応じてCSSクラスを動的に変更します。\n    // isActiveがtrueなら、下線が表示され文字色が青になるスタイルが適用されます。\n    const activeClasses = 'border-b-2 border-blue-600 text-blue-600';\n    const inactiveClasses = 'text-gray-500 hover:text-gray-700';\n\n    return (\n        <button\n            onClick={onClick}\n            className={`px-4 py-2 text-sm font-medium rounded-t-lg transition-colors duration-200 ease-in-out focus:outline-none ${\n                isActive ? activeClasses : inactiveClasses\n            }`}\n        >\n            {label}\n        </button>\n    );\n}\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default TabButton;\n","// Reactライブラリをインポートします。\nimport React from 'react';\n// アイコンコンポーネントをインポートします。\nimport { AddIcon, SearchIcon } from './icons';\n\n// Controlsコンポーネントが受け取るデータ（props）の型を定義します。\ninterface ControlsProps {\n  searchTerm: string; // 現在の検索キーワード\n  onSearchTermChange: (term: string) => void; // 検索キーワードが変更されたときに呼ばれる関数\n  onAddQuestion: () => void; // 「質問を追加」ボタンがクリックされたときに呼ばれる関数\n}\n\n/**\n * 検索バーと追加ボタンを持つコントロールパネルコンポーネント\n * @param {ControlsProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst Controls: React.FC<ControlsProps> = ({ searchTerm, onSearchTermChange, onAddQuestion }) => {\n  return (\n    <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\n      {/* 検索入力フィールド */}\n      <div className=\"relative w-full sm:w-auto flex-grow sm:max-w-xs\">\n        <input\n          type=\"text\"\n          placeholder=\"質問を検索...\"\n          value={searchTerm}\n          onChange={e => onSearchTermChange(e.target.value)}\n          className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        />\n        {/* 検索アイコン */}\n        <SearchIcon className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n      </div>\n      \n      {/* 質問追加ボタン */}\n      <button\n        onClick={onAddQuestion}\n        className=\"w-full sm:w-auto flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-transform transform hover:scale-105 shadow-md\"\n      >\n        <AddIcon />\n        <span>質問を追加</span>\n      </button>\n    </div>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default Controls;\n","// Reactライブラリをインポートします。\nimport React from 'react';\n// 質問データの型定義とアイコンコンポーネントをインポートします。\nimport type { Question } from '../types';\nimport { EditIcon, DeleteIcon } from './icons';\n\n// QuestionListコンポーネントが受け取るデータ（props）の型を定義します。\ninterface QuestionListProps {\n  questions: Question[];         // 表示する質問のリスト\n  onEdit: (question: Question) => void; // 編集ボタンがクリックされたときに呼ばれる関数\n  onDelete: (id: number) => void;       // 削除ボタンがクリックされたときに呼ばれる関数\n}\n\n/**\n * 質問の一覧を表示するコンポーネント\n * 画面サイズに応じて、カード形式（モバイル）とテーブル形式（PC）を切り替えます。\n * @param {QuestionListProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst QuestionList: React.FC<QuestionListProps> = ({ questions, onEdit, onDelete }) => {\n  // 表示する質問がない場合のメッセージ\n  if (questions.length === 0) {\n    return <div className=\"text-center py-10 text-gray-500\">質問が見つかりません。</div>;\n  }\n\n  return (\n    <div className=\"flow-root\">\n      {/* --- モバイル用のカード表示 (mdサイズ未満で表示) --- */}\n      <div className=\"space-y-4 md:hidden\">\n        {questions.map(q => (\n          <div key={q.id} className=\"bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200\">\n            <p className=\"text-gray-800 text-sm break-words mb-3\">{q.text}</p>\n            <div className=\"flex justify-between items-center border-t border-gray-200 pt-3 mt-3\">\n              <span className=\"text-xs text-gray-500\">作成日: {q.createdAt}</span>\n              <div className=\"flex items-center space-x-1\">\n                <button onClick={() => onEdit(q)} className=\"text-blue-600 p-2 rounded-full hover:bg-blue-100 transition-colors\"><EditIcon className=\"w-5 h-5\"/></button>\n                <button onClick={() => onDelete(q.id)} className=\"text-red-600 p-2 rounded-full hover:bg-red-100 transition-colors\"><DeleteIcon className=\"w-5 h-5\"/></button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* --- PC用のテーブル表示 (mdサイズ以上で表示) --- */}\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">質問テキスト</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">作成日</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">操作</th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {questions.map(q => (\n              <tr key={q.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-normal text-sm text-gray-700 max-w-xl break-words\">{q.text}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{q.createdAt}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                  <div className=\"flex justify-end space-x-2\">\n                    <button onClick={() => onEdit(q)} className=\"text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-100 transition-colors\"><EditIcon /></button>\n                    <button onClick={() => onDelete(q.id)} className=\"text-red-600 hover:text-red-900 p-2 rounded-full hover:bg-red-100 transition-colors\"><DeleteIcon /></button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default QuestionList;\n","// Reactライブラリをインポートします。\nimport React from 'react';\n\n// Paginationコンポーネントが受け取るデータ（props）の型を定義します。\ninterface PaginationProps {\n  currentPage: number; // 現在のページ番号\n  totalPages: number;  // 全体のページ数\n  onPageChange: (page: number) => void; // ページ番号が変更されたときに呼ばれる関数\n}\n\n/**\n * ページネーション（ページ送り）を表示・操作するためのコンポーネント\n * @param {PaginationProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst Pagination: React.FC<PaginationProps> = ({ currentPage, totalPages, onPageChange }) => {\n  // 前のページへ移動する処理\n  const goToPreviousPage = () => {\n    // 現在のページが1より大きい場合のみ、ページ番号を1減らす\n    onPageChange(Math.max(1, currentPage - 1));\n  };\n\n  // 次のページへ移動する処理\n  const goToNextPage = () => {\n    // 現在のページが総ページ数より小さい場合のみ、ページ番号を1増やす\n    onPageChange(Math.min(totalPages, currentPage + 1));\n  };\n  \n  return (\n    <div className=\"flex flex-col sm:flex-row justify-between items-center mt-6 gap-4 sm:gap-0\">\n      {/* 現在のページと総ページ数を表示 */}\n      <span className=\"text-sm text-gray-700\">\n        ページ <span className=\"font-semibold\">{currentPage}</span> / <span className=\"font-semibold\">{totalPages}</span>\n      </span>\n      \n      {/* ページ移動ボタン */}\n      <div className=\"flex space-x-2\">\n        <button \n          onClick={goToPreviousPage} \n          disabled={currentPage === 1} // 最初のページでは「前へ」ボタンを無効化\n          className=\"px-4 py-2 text-sm text-gray-700 bg-white border rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          前へ\n        </button>\n        <button \n          onClick={goToNextPage} \n          disabled={currentPage === totalPages} // 最後のページでは「次へ」ボタンを無効化\n          className=\"px-4 py-2 text-sm text-gray-700 bg-white border rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          次へ\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default Pagination;\n","\nimport React, { ReactNode } from 'react';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: ReactNode;\n  title: string;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children, title }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-lg animate-fade-in-up\">\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">{title}</h3>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </div>\n       <style>{`\n          @keyframes fade-in-up {\n            0% {\n              opacity: 0;\n              transform: translateY(20px);\n            }\n            100% {\n              opacity: 1;\n              transform: translateY(0);\n            }\n          }\n          .animate-fade-in-up {\n            animation: fade-in-up 0.3s ease-out forwards;\n          }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Modal;\n","// Reactから必要な機能をインポートします。\nimport React, { useState, useEffect } from 'react';\n// 型定義と汎用モーダルコンポーネントをインポートします。\nimport type { Question, QuestionType } from '../types';\nimport Modal from './Modal';\n\n// QuestionModalコンポーネントが受け取るデータ（props）の型を定義します。\ninterface QuestionModalProps {\n  isOpen: boolean; // モーダルが開いているかどうか\n  onClose: () => void; // モーダルを閉じるための関数\n  onSave: (questionText: string, type: QuestionType) => void; // 質問を保存するための関数\n  question: Question | null; // 編集対象の質問データ（新規追加の場合はnull）\n  maxQuestions: number; // 登録できる質問の最大数\n  currentQuestionCount: number; // 現在の質問数\n  activeTab: QuestionType; // 現在選択されているタブの種類\n}\n\n/**\n * 質問の新規追加または編集を行うためのモーダル（ポップアップ）コンポーネント\n * @param {QuestionModalProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst QuestionModal: React.FC<QuestionModalProps> = ({ isOpen, onClose, onSave, question, maxQuestions, currentQuestionCount, activeTab }) => {\n    // 入力された質問テキストの状態を管理します。\n    const [text, setText] = useState('');\n    // 選択された質問の種別（ルーレット or スロット）の状態を管理します。\n    const [type, setType] = useState<QuestionType>(activeTab);\n    // エラーメッセージの状態を管理します。\n    const [error, setError] = useState('');\n\n    // `question`（編集対象）やモーダルの表示状態が変わった時に実行される副作用フック\n    useEffect(() => {\n        // 編集対象の質問があればそのテキストとタイプを、なければ空文字と現在のアクティブなタブをセットします。\n        setText(question?.text || '');\n        setType(question?.type || activeTab);\n        setError(''); // エラーメッセージをリセット\n    }, [question, isOpen, activeTab]);\n\n    // モーダルが編集モードかどうかを判定します。\n    const isEditing = !!question;\n    // 質問数が上限に達しているかどうかを判定します（新規追加時のみ）。\n    const isAtLimit = !isEditing && currentQuestionCount >= maxQuestions;\n\n    /**\n     * 保存ボタンがクリックされたときに実行される関数\n     */\n    const handleSubmit = () => {\n        // 入力値のバリデーション（検証）\n        if (text.trim().length === 0) {\n            setError('質問テキストは空にできません。');\n            return;\n        }\n        if (text.length > 500) {\n            setError('質問テキストは500文字を超えることはできません。');\n            return;\n        }\n        if(isAtLimit) {\n            setError(`新しい質問は追加できません。上限の${maxQuestions}件に達しました。`);\n            return;\n        }\n        // 親コンポーネントから渡された保存関数を実行\n        onSave(text, type);\n        onClose(); // モーダルを閉じる\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title={isEditing ? '質問を編集' : '新しい質問を追加'}>\n            <div className=\"space-y-4\">\n                 {/* 質問種別選択ラジオボタン */}\n                 <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-gray-700\">種別</label>\n                    <div className=\"flex space-x-4\">\n                        <label className=\"flex items-center\">\n                            <input \n                                type=\"radio\" \n                                name=\"questionType\" \n                                value=\"roulette\" \n                                checked={type === 'roulette'}\n                                onChange={() => setType('roulette')}\n                                className=\"form-radio h-4 w-4 text-blue-600\"\n                            />\n                            <span className=\"ml-2 text-gray-700\">ルーレット</span>\n                        </label>\n                        <label className=\"flex items-center\">\n                            <input \n                                type=\"radio\" \n                                name=\"questionType\" \n                                value=\"slot\" \n                                checked={type === 'slot'}\n                                onChange={() => setType('slot')}\n                                className=\"form-radio h-4 w-4 text-blue-600\"\n                            />\n                            <span className=\"ml-2 text-gray-700\">スロット</span>\n                        </label>\n                    </div>\n                </div>\n                {/* 質問テキスト入力エリア */}\n                <textarea\n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                    rows={5}\n                    className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"質問テキストを入力...\"\n                    maxLength={500}\n                    disabled={isAtLimit}\n                />\n                <div className=\"text-right text-sm text-gray-500\">{text.length} / 500</div>\n                 {error && <p className=\"text-red-500 text-sm\">{error}</p>}\n                {/* ボタンエリア */}\n                <div className=\"flex justify-end space-x-4\">\n                    <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\">キャンセル</button>\n                    <button onClick={handleSubmit} disabled={isAtLimit} className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors\">質問を保存</button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default QuestionModal;\n","// Reactライブラリと汎用モーダルコンポーネントをインポートします。\nimport React from 'react';\nimport Modal from './Modal';\n\n// ConfirmationDialogコンポーネントが受け取るデータ（props）の型を定義します。\ninterface ConfirmationDialogProps {\n  isOpen: boolean;      // ダイアログが開いているかどうか\n  onClose: () => void;    // ダイアログを閉じるための関数\n  onConfirm: () => void;  // 確認（削除実行）ボタンが押されたときの関数\n  title: string;        // ダイアログのタイトル\n  message: string;      // 表示する確認メッセージ\n}\n\n/**\n * 操作の実行前に確認を求めるためのダイアログコンポーネント\n * @param {ConfirmationDialogProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({ isOpen, onClose, onConfirm, title, message }) => {\n  // isOpenがfalseの場合は何も表示しない\n  if (!isOpen) return null;\n\n  return (\n    // 汎用的なModalコンポーネントを土台として使います\n    <Modal isOpen={isOpen} onClose={onClose} title={title}>\n      {/* 確認メッセージ */}\n      <p className=\"text-gray-600 mb-6\">{message}</p>\n      \n      {/* ボタンエリア */}\n      <div className=\"flex justify-end space-x-4\">\n        <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\">キャンセル</button>\n        <button onClick={onConfirm} className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\">削除を実行</button>\n      </div>\n    </Modal>\n  );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default ConfirmationDialog;\n","// Reactから必要な機能をインポートします。\n// useState: コンポーネント内で状態（データ）を管理します。\n// useMemo: 計算結果を記憶（メモ化）して、不要な再計算を防ぎパフォーマンスを向上させます。\n// useCallback: 関数の不要な再作成を防ぎ、パフォーマンスを向上させます。\nimport React, { useState, useMemo, useCallback } from 'react';\n\n// アプリケーションで使う型定義や定数をインポートします。\nimport type { Question, QuestionType } from '../types';\nimport { INITIAL_QUESTIONS, MAX_QUESTIONS, QUESTIONS_PER_PAGE } from '../constants';\n\n// UIを構成する子コンポーネントをインポートします。\nimport Header from './Header';\nimport TabButton from './TabButton';\nimport Controls from './Controls';\nimport QuestionList from './QuestionList';\nimport Pagination from './Pagination';\nimport QuestionModal from './QuestionModal';\nimport ConfirmationDialog from './ConfirmationDialog';\n\n\n// AdminDashboardコンポーネントが受け取るデータ（props）の型を定義します。\ninterface AdminDashboardProps {\n  onLogout: () => void; // ログアウトを実行する関数\n}\n\n/**\n * 質問管理ダッシュボードのメインコンポーネント\n * 質問の表示、追加、編集、削除など、管理機能の全体を統括します。\n * @param {AdminDashboardProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst AdminDashboard: React.FC<AdminDashboardProps> = ({ onLogout }) => {\n    // --- 状態管理(useState) ---\n    // ここで管理しているデータが変更されると、画面が自動的に再描画されます。\n\n    // 全ての質問データを管理します。初期値として`INITIAL_QUESTIONS`を使います。\n    const [questions, setQuestions] = useState<Question[]>(INITIAL_QUESTIONS);\n    // 検索バーに入力されたテキストを管理します。\n    const [searchTerm, setSearchTerm] = useState('');\n    // 現在表示しているページの番号を管理します。\n    const [currentPage, setCurrentPage] = useState(1);\n    // 現在選択されているタブ（'roulette' or 'slot'）を管理します。\n    const [activeTab, setActiveTab] = useState<QuestionType>('roulette');\n    // 編集中の質問データを管理します。新規追加の場合は`null`になります。\n    const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);\n    // 削除しようとしている質問のIDを管理します。削除確認ダイアログを表示するために使います。\n    const [deletingQuestionId, setDeletingQuestionId] = useState<number | null>(null);\n    // 質問追加・編集モーダル（ポップアップ画面）の表示状態を管理します。\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    // --- データ加工(useMemo) ---\n    // `questions`, `searchTerm`, `activeTab`が変更された時だけ再計算されます。\n\n    // 表示する質問をフィルタリングします。\n    const filteredQuestions = useMemo(() => {\n        return questions\n            .filter(q => q.type === activeTab) // 選択中のタブと同じタイプの質問だけを残す\n            .filter(q => q.text.toLowerCase().includes(searchTerm.toLowerCase())); // 検索ワードを含む質問だけを残す\n    }, [questions, searchTerm, activeTab]);\n\n    // フィルタリングされた質問を、現在のページに合わせて切り出します。\n    const paginatedQuestions = useMemo(() => {\n        const startIndex = (currentPage - 1) * QUESTIONS_PER_PAGE;\n        return filteredQuestions.slice(startIndex, startIndex + QUESTIONS_PER_PAGE);\n    }, [filteredQuestions, currentPage]);\n    \n    // 全ページ数を計算します。\n    const totalPages = Math.ceil(filteredQuestions.length / QUESTIONS_PER_PAGE);\n\n    // --- イベントハンドラ(useCallback) ---\n    // これらの関数は、ユーザーの操作（クリックなど）によって呼び出されます。\n\n    // タブがクリックされた時に呼ばれる関数\n    const handleTabChange = (tab: QuestionType) => {\n        setActiveTab(tab);\n        setCurrentPage(1); // タブを切り替えたら、1ページ目に戻す\n    }\n\n    // 「質問を追加」ボタンが押された時に呼ばれる関数\n    const handleAddQuestion = useCallback(() => {\n        setEditingQuestion(null); // 編集中の質問はないのでnullに\n        setIsModalOpen(true); // モーダルを開く\n    }, []);\n\n    // 質問の「編集」ボタンが押された時に呼ばれる関数\n    const handleEditQuestion = useCallback((question: Question) => {\n        setEditingQuestion(question); // 編集対象の質問をセット\n        setIsModalOpen(true); // モーダルを開く\n    }, []);\n\n    // 質問の「削除」ボタンが押された時に呼ばれる関数\n    const handleDeleteQuestion = useCallback((id: number) => {\n        setDeletingQuestionId(id); // 削除対象の質問IDをセット（確認ダイアログが表示される）\n    }, []);\n\n    // 削除確認ダイアログで「削除を実行」が押された時に呼ばれる関数\n    const confirmDelete = useCallback(() => {\n        if (deletingQuestionId !== null) {\n            setQuestions(prev => prev.filter(q => q.id !== deletingQuestionId)); // IDが一致しない質問だけを残す＝削除\n            setDeletingQuestionId(null); // 削除対象IDをリセット\n        }\n    }, [deletingQuestionId]);\n    \n    // 質問追加・編集モーダルで「保存」が押された時に呼ばれる関数\n    const handleSaveQuestion = useCallback((text: string, type: QuestionType) => {\n        if (editingQuestion) {\n            // 編集の場合\n            setQuestions(prev => prev.map(q => q.id === editingQuestion.id ? { ...q, text, type } : q));\n        } else {\n            // 新規追加の場合\n             if (questions.length >= MAX_QUESTIONS) {\n                alert(`${MAX_QUESTIONS}件より多くの質問は追加できません。`);\n                return;\n            }\n            const newQuestion: Question = {\n                id: Math.max(0, ...questions.map(q => q.id)) + 1, // 新しいIDを生成\n                text,\n                createdAt: new Date().toISOString().split('T')[0],\n                type,\n            };\n            setQuestions(prev => [newQuestion, ...prev]); // 質問リストの先頭に追加\n        }\n    }, [editingQuestion, questions]);\n\n    // --- レンダリング ---\n    // 画面に表示するHTMLのようなものを返します (JSX)。\n    return (\n        <div className=\"min-h-screen bg-gray-100 font-sans\">\n            <Header\n                questionCount={questions.length}\n                maxQuestions={MAX_QUESTIONS}\n                onLogout={onLogout}\n            />\n\n            <main className=\"container mx-auto p-4 sm:p-6 lg:p-8\">\n                <div className=\"bg-white p-4 sm:p-6 rounded-lg shadow-lg\">\n                    {/* タブ */}\n                    <div className=\"border-b border-gray-200 mb-6\">\n                        <nav className=\"-mb-px flex space-x-6\" aria-label=\"Tabs\">\n                            <TabButton label=\"ルーレット\" isActive={activeTab === 'roulette'} onClick={() => handleTabChange('roulette')} />\n                            <TabButton label=\"スロット\" isActive={activeTab === 'slot'} onClick={() => handleTabChange('slot')} />\n                        </nav>\n                    </div>\n\n                    <Controls\n                        searchTerm={searchTerm}\n                        onSearchTermChange={setSearchTerm}\n                        onAddQuestion={handleAddQuestion}\n                    />\n\n                    <QuestionList\n                        questions={paginatedQuestions}\n                        onEdit={handleEditQuestion}\n                        onDelete={handleDeleteQuestion}\n                    />\n                    \n                    {totalPages > 1 && (\n                      <Pagination\n                        currentPage={currentPage}\n                        totalPages={totalPages}\n                        onPageChange={setCurrentPage}\n                      />\n                    )}\n                </div>\n            </main>\n            \n            <QuestionModal \n              isOpen={isModalOpen}\n              onClose={() => setIsModalOpen(false)}\n              onSave={handleSaveQuestion}\n              question={editingQuestion}\n              maxQuestions={MAX_QUESTIONS}\n              currentQuestionCount={questions.length}\n              activeTab={activeTab}\n            />\n\n            <ConfirmationDialog\n              isOpen={deletingQuestionId !== null}\n              onClose={() => setDeletingQuestionId(null)}\n              onConfirm={confirmDelete}\n              title=\"削除の確認\"\n              message=\"この質問を削除してもよろしいですか？この操作は元に戻せません。\"\n            />\n        </div>\n    );\n};\n\nexport default AdminDashboard;\n","// Reactから必要な機能をインポートします。\n// useState: コンポーネント内で状態（データ）を管理するために使います。\nimport React, { useState } from 'react';\n\n// LoginPageコンポーネントが受け取るデータ（props）の型を定義します。\ninterface LoginPageProps {\n    onLogin: (password: string) => void; // ログインを試みるための関数\n    error: string; // 表示するエラーメッセージ\n}\n\n/**\n * ログイン画面を表示するためのコンポーネント\n * @param {LoginPageProps} props - このコンポーネントが受け取るプロパティ。\n */\nconst LoginPage: React.FC<LoginPageProps> = ({ onLogin, error }) => {\n    // ユーザー名入力フィールドの状態を管理します。初期値は'admin'です。\n    const [username, setUsername] = useState('admin');\n    // パスワード入力フィールドの状態を管理します。初期値は空です。\n    const [password, setPassword] = useState('');\n\n    /**\n     * フォームが送信されたとき（ログインボタンが押されたとき）に実行される関数\n     * @param e - フォーム送信イベントのオブジェクト\n     */\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault(); // フォーム送信時のページの再読み込みを防ぎます。\n        onLogin(password); // 親コンポーネントから渡されたonLogin関数を呼び出します。\n    };\n\n    // 画面に表示する内容（ログインフォーム）を返します。\n    return (\n        <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\n            <div className=\"w-full max-w-md bg-white p-6 sm:p-8 rounded-xl shadow-lg\">\n                <h1 className=\"text-3xl font-bold text-center text-gray-800 mb-2\">管理者ログイン</h1>\n                <p className=\"text-center text-gray-500 mb-8\">質問管理ダッシュボード</p>\n                <form onSubmit={handleSubmit}>\n                    {/* ユーザー名入力欄 */}\n                    <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"username\">\n                            ユーザー名\n                        </label>\n                        <input\n                            id=\"username\"\n                            type=\"text\"\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                            className=\"shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            placeholder=\"admin\"\n                            readOnly // このフィールドは編集不可にしています。\n                        />\n                    </div>\n                    {/* パスワード入力欄 */}\n                    <div className=\"mb-6\">\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\n                            パスワード\n                        </label>\n                        <input\n                            id=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                            className=\"shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            placeholder=\"password\"\n                        />\n                    </div>\n                    {/* エラーメッセージ（エラーがある場合のみ表示） */}\n                    {error && <p className=\"text-red-500 text-xs italic mb-4\">{error}</p>}\n                    {/* サインインボタン */}\n                    <div className=\"flex items-center justify-between\">\n                        <button\n                            type=\"submit\"\n                            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-transform transform hover:scale-105\"\n                        >\n                            サインイン\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\n// このコンポーネントを他のファイルで使えるようにエクスポートします。\nexport default LoginPage;\n","\"use client\";\r\n\r\nimport React from \"react\";\r\nimport AdminApp from \"../../admin/App\"; // 管理画面のApp.tsxを読み込み\r\n\r\nexport default function AdminPage() {\r\n  return <AdminApp />;\r\n}\r\n"],"names":[],"mappings":"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"}